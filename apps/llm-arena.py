import streamlit as st
import warnings
import pandas as pd
import json
import random
from dotenv import load_dotenv
from st_draggable_list import DraggableList
from langchain_community.llms import Ollama
from langchain_openai import ChatOpenAI
from langchain_core.output_parsers import StrOutputParser

warnings.filterwarnings('ignore')
load_dotenv()

llama_chain = Ollama(model='llama3.1', temperature=0) | StrOutputParser()
gpt_chain = ChatOpenAI(model='gpt-4o', temperature=0) | StrOutputParser()

questions_df = pd.read_csv('questions.csv')

if 'answers_df' not in st.session_state:
  answers_df = pd.DataFrame()

  for question in questions_df['question']:
    llama_res = llama_chain.invoke(question)
    gpt_res = gpt_chain.invoke(question)

    row = pd.DataFrame({
      'question': question,
      'llama': llama_res,
      'gpt': gpt_res,
    }, index=[0])
    answers_df = pd.concat([answers_df, row], ignore_index=True)

  st.session_state['answers_df'] = answers_df

title = 'LLM-–∞—Ä–µ–Ω–∞'

st.set_page_config(page_title=title)

st.title('üèüÔ∏è LLM-–∞—Ä–µ–Ω–∞')
st.write("""
–ó–¥—Ä–∞–≤—Å—Ç–≤—É–π—Ç–µ! –í—ã —É–≤–∏–¥–∏—Ç–µ –æ—Ç–≤–µ—Ç—ã, —Å–≥–µ–Ω–µ—Ä–∏—Ä–æ–≤–∞–Ω–Ω—ã–µ —Ä–∞–∑–ª–∏—á–Ω—ã–º–∏ –Ω–µ–π—Ä–æ–Ω–Ω—ã–º–∏ —Å–µ—Ç—è–º–∏ –Ω–∞
–∑–∞–¥–∞–Ω–Ω—ã–µ –≤–æ–ø—Ä–æ—Å—ã. –í–∞—à–∞ –∑–∞–¥–∞—á–∞ ‚Äî —Ä–∞—Å–ø–æ–ª–æ–∂–∏—Ç—å —ç—Ç–∏ –æ—Ç–≤–µ—Ç—ã –≤ –ø–æ—Ä—è–¥–∫–µ –æ—Ç —Å–∞–º–æ–≥–æ
–ª—É—á—à–µ–≥–æ (–≤–≤–µ—Ä—Ö—É —Å–ø–∏—Å–∫–∞) –¥–æ —Å–∞–º–æ–≥–æ —Ö—É–¥—à–µ–≥–æ (–≤–Ω–∏–∑—É —Å–ø–∏—Å–∫–∞). –î–ª—è –∫–∞–∂–¥–æ–π –ø–∞—Ä—ã
–≤–æ–ø—Ä–æ—Å-–æ—Ç–≤–µ—Ç –≤—ã —Å–º–æ–∂–µ—Ç–µ –≤—ã–±—Ä–∞—Ç—å —É–Ω–∏–∫–∞–ª—å–Ω—ã–π —Ä–∞–Ω–≥ –¥–ª—è –∫–∞–∂–¥–æ–≥–æ –æ—Ç–≤–µ—Ç–∞, —á—Ç–æ–±—ã
–æ—Ç—Ä–∞–∑–∏—Ç—å –≤–∞—à–µ –ø—Ä–µ–¥–ø–æ—á—Ç–µ–Ω–∏–µ. –ü–æ—Å–ª–µ —Ç–æ–≥–æ –∫–∞–∫ –≤—ã —Ä–∞—Å—Å—Ç–∞–≤–∏—Ç–µ —Ä–∞–Ω–≥–∏ –¥–ª—è –≤—Å–µ—Ö
–æ—Ç–≤–µ—Ç–æ–≤, –Ω–∞–∂–º–∏—Ç–µ –Ω–∞ –∫–Ω–æ–ø–∫—É "–°–æ—Ö—Ä–∞–Ω–∏—Ç—å", —á—Ç–æ–±—ã —Å–æ—Ö—Ä–∞–Ω–∏—Ç—å –≤–∞—à–∏ –æ—Ü–µ–Ω–∫–∏ –≤
—Ñ–∞–π–ª. –≠—Ç–æ –ø–æ–∑–≤–æ–ª–∏—Ç –Ω–∞–º –ø—Ä–æ–∞–Ω–∞–ª–∏–∑–∏—Ä–æ–≤–∞—Ç—å, –∫–∞–∫–∏–µ –æ—Ç–≤–µ—Ç—ã –≤—ã —Å—á–∏—Ç–∞–µ—Ç–µ
–Ω–∞–∏–±–æ–ª–µ–µ –∫–∞—á–µ—Å—Ç–≤–µ–Ω–Ω—ã–º–∏.
""")

grades = {}

for index, row in st.session_state['answers_df'].iterrows():
  question = row['question']
  llama = row['llama']
  gpt = row['gpt']

  st.subheader(f'–í–æ–ø—Ä–æ—Å {index + 1}: {question}')

  answers = [
    {'id': 'llama', 'order': 1, 'name': llama},
    {'id': 'gpt', 'order': 3, 'name': gpt},
  ]
  random.shuffle(answers)

  slist = DraggableList(answers, width='100%', key=question)
  grades[question] = slist

cols = st.columns(4)
if cols[-1].button('Save', type='primary', use_container_width=True):
  with open('grades.json', 'w') as f:
    json.dump(grades, f)
  st.success('Rankings saved successfully!')
